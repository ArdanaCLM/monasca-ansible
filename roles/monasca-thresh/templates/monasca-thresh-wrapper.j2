#!/bin/bash
#
# (c) Copyright 2015-2016 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017-2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

# Run storm command optionally with specified timeout
storm_cmd()
{
  local timeout="" cmd_args=()

  # check if a specific timeout specified, can be empty string to disable
  case "${1}" in
      timeout=*)
        eval "${1}"
        shift
        ;;
  esac

  # if timeout is not disabled prepend timeout ${timeout} to cmd_args
  if [[ -n "${timeout}" ]]; then
    cmd_args+=( timeout "${timeout}" )
  fi

  # add storm command + args to cmd_args
  cmd_args+=( {{ storm_executable }} "${@}" )

  sudo -EHu {{ thresh_user }} "${cmd_args[@]}"
}

storm_check_svc()
{
  local list_rc svc timeout="{{ monasca_thresh_storm_timeout }}" tmp_file="$(mktemp --tmpdir mtw_storm_check_svc.XXXXXXXX)"

  case "${1}" in
      timeout=*)
        timeout="${1}"
        shift
        ;;
  esac

  svc="${1}"

  storm_cmd ${timeout:+timeout="${timeout}"} list > "${tmp_file}" 2>&1
  list_rc=$?

  # if list command timed out
  if (( list_rc == 124 )); then
    echo "storm list timed out"
  else
    grep "${svc}" "${tmp_file}"
    list_rc=$?
  fi

  # remove temp file
  rm -f "${tmp_file}"

  return ${list_rc}
}

case "$1" in
    start)
      storm_check_svc thresh-cluster
      check_rc=$?
      if (( check_rc == 124 )); then
        exit ${check_rc}
      elif (( check_rc != 0 )); then
        storm_cmd jar {{ monasca_thresh_jar }} monasca.thresh.ThresholdingEngine {{ 'monasca' | config_dir() }}/thresh-config.yml thresh-cluster
        exit $?
      else
        echo "monasca-thresh is already running"
        exit 0
      fi
    ;;
    stop)
      # On system shutdown storm is being shutdown also and this will hang so skip shutting down thresh in that case
      if [ -e '/sbin/runlevel' ]; then  # upstart/sysV case
        if [ $(runlevel | cut -d\  -f 2) == 0 ]; then
          exit 0
        fi
      else  # systemd case
        systemctl list-units --type=target |grep shutdown.target
        if [ $? -eq 0 ]; then
          exit 0
        fi
      fi

      storm_cmd kill thresh-cluster

      # The kill command returns but actually takes awhile loop watching status
      timeout_retries=3
      while true; do
        storm_check_svc thresh-cluster
        check_rc=$?

        if (( check_rc == 124 )); then
          (( timeout_retries -= 1 ))
          (( timeout_retries == 0 )) && exit ${check_rc}
        elif (( check_rc == 1 )); then
          break
        fi

        sleep 1
      done
    ;;
    status)
        storm_check_svc thresh-cluster
        exit $?
    ;;
esac
