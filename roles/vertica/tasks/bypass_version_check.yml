#
# (c) Copyright 2017 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---

# Vertica 9.0.0 currently supports upto SLES 12 sp2 version and has pre-install
# check to make sure that supported version is used. So for installing it on
# SLES 12 sp3, we are temporarily updating os-release version to sp2 and
# reverting back to sp3 after vertica package install.

- name: vertica | bypass_version_check | Check vertica package if installed
  shell: "zypper search --installed-only --match-exact vertica | grep vertica"
  become: yes
  ignore_errors: yes
  register: vertica_check_package_installed
  when: ansible_os_family | lower == 'suse'

- name: vertica | bypass_version_check | Set version hack true if needed
  set_fact:
    vertica_version_hack_needed: True
  when: vertica_check_package_installed is defined and
        vertica_check_package_installed.rc != 0 and
        (ansible_os_family | lower == 'suse') and
        bypass_op_type == "pre-install"

- name: vertica | bypass_version_check | Set version hack false if not needed
  set_fact:
    vertica_version_hack_needed: False
  when: vertica_version_hack_needed is not defined

- name: vertica | bypass_version_check | Update to supported version
  lineinfile:
    dest: "{{ sles_version_file }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - { regexp: "^VERSION=\"12-SP3\"$",
        line: "VERSION=\"12-SP2\"" }
    - { regexp: "^VERSION_ID=\"12.3\"$",
        line: "VERSION_ID=\"12.2\"" }
  when: vertica_version_hack_needed and (bypass_op_type == "pre-install")

- name: vertica | bypass_version_check | Revert to original version
  lineinfile:
    dest: "{{ sles_version_file }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - { regexp: "^VERSION=\"12-SP2\"$",
        line: "VERSION=\"12-SP3\"" }
    - { regexp: "^VERSION_ID=\"12.2\"$",
        line: "VERSION_ID=\"12.3\"" }
  when: vertica_version_hack_needed and (bypass_op_type == "post-install")

- name: vertica | bypass_version_check | Set version hack to false after revert
  set_fact:
    vertica_version_hack_needed: False
  when: vertica_version_hack_needed and
        bypass_op_type == "post-install"